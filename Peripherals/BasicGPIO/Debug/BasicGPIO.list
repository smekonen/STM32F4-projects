
BasicGPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000208  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b0  080003b8  000103b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b0  080003b0  000103b8  2**0
                  CONTENTS
  4 .ARM          00000000  080003b0  080003b0  000103b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b0  080003b8  000103b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b0  080003b0  000103b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003b4  080003b4  000103b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003b8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003b8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008ac  00000000  00000000  000103e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000209  00000000  00000000  00010c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000070  00000000  00000000  00010ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000048  00000000  00000000  00010f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001819e  00000000  00000000  00010f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000912  00000000  00000000  000290f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087be3  00000000  00000000  00029a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b15eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b4  00000000  00000000  000b1668  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000398 	.word	0x08000398

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000398 	.word	0x08000398

080001e8 <main>:
//Will include the main CMSIS header "stm32f407xx.h"
//That will include system_stm32xx.h and core_cm4.h, cmsis_compiler.h, etc.
#include "stm32f4xx.h"

int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0

	/*GPIO Port D initialization example ----------------------------------------*/

	SystemInit();
 80001ee:	f000 f84f 	bl	8000290 <SystemInit>

	//Peripheral clock enable (GPIO Port D)
	//AHB: Advanced high-performance bus (derived from SYSCLK),
	//APB: Advanced peripheral bus (derived from AHB)

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80001f2:	4b24      	ldr	r3, [pc, #144]	; (8000284 <main+0x9c>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f6:	4a23      	ldr	r2, [pc, #140]	; (8000284 <main+0x9c>)
 80001f8:	f043 0308 	orr.w	r3, r3, #8
 80001fc:	6313      	str	r3, [r2, #48]	; 0x30

	//Alternate function registers
	GPIOD->AFR[0];
 80001fe:	4b22      	ldr	r3, [pc, #136]	; (8000288 <main+0xa0>)
 8000200:	6a1b      	ldr	r3, [r3, #32]
	GPIOD->AFR[1];
 8000202:	4b21      	ldr	r3, [pc, #132]	; (8000288 <main+0xa0>)
 8000204:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	//Mode register - 00=I, 01=I/O, 10=AFR, 11=Analog
	GPIOD->MODER |=GPIO_MODER_MODE15_0
 8000206:	4b20      	ldr	r3, [pc, #128]	; (8000288 <main+0xa0>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a1f      	ldr	r2, [pc, #124]	; (8000288 <main+0xa0>)
 800020c:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000210:	6013      	str	r3, [r2, #0]
				 | GPIO_MODER_MODE14_0
				 | GPIO_MODER_MODE13_0
				 | GPIO_MODER_MODE12_0;

	//Bit set/reset register (write only)
	GPIOD->BSRR |=GPIO_BSRR_BS_15
 8000212:	4b1d      	ldr	r3, [pc, #116]	; (8000288 <main+0xa0>)
 8000214:	699b      	ldr	r3, [r3, #24]
 8000216:	4a1c      	ldr	r2, [pc, #112]	; (8000288 <main+0xa0>)
 8000218:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800021c:	6193      	str	r3, [r2, #24]
				| GPIO_BSRR_BS_14
				| GPIO_BSRR_BS_13
				| GPIO_BSRR_BS_12;

	//Input/outupt data register (read only)
	GPIOD->IDR;
 800021e:	4b1a      	ldr	r3, [pc, #104]	; (8000288 <main+0xa0>)
 8000220:	691b      	ldr	r3, [r3, #16]
	GPIOD->ODR;
 8000222:	4b19      	ldr	r3, [pc, #100]	; (8000288 <main+0xa0>)
 8000224:	695b      	ldr	r3, [r3, #20]

	//Lock register - lock value of port bit
	GPIOD->LCKR;
 8000226:	4b18      	ldr	r3, [pc, #96]	; (8000288 <main+0xa0>)
 8000228:	69db      	ldr	r3, [r3, #28]


	//Output speed (32) - 00=Low, 01=Medium, 10=High, 11=VeryHigh
	GPIOD->OSPEEDR |=GPIO_OSPEEDER_OSPEEDR15_1
 800022a:	4b17      	ldr	r3, [pc, #92]	; (8000288 <main+0xa0>)
 800022c:	689b      	ldr	r3, [r3, #8]
 800022e:	4a16      	ldr	r2, [pc, #88]	; (8000288 <main+0xa0>)
 8000230:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
 8000234:	6093      	str	r3, [r2, #8]
				   | GPIO_OSPEEDER_OSPEEDR14_1
				   | GPIO_OSPEEDER_OSPEEDR13_1
				   | GPIO_OSPEEDER_OSPEEDR12_1;

	//Output type (16) 0=push/pull, 1=open/drain
	GPIOD->OTYPER;
 8000236:	4b14      	ldr	r3, [pc, #80]	; (8000288 <main+0xa0>)
 8000238:	685b      	ldr	r3, [r3, #4]

	//Pull-up/Pull-down register - 00=No, 01=Up, 10=Down
	GPIOD->PUPDR = GPIO_PUPDR_PUPDR15_0;
 800023a:	4b13      	ldr	r3, [pc, #76]	; (8000288 <main+0xa0>)
 800023c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000240:	60da      	str	r2, [r3, #12]


	while(1){

		if((GPIOD->ODR & GPIO_ODR_ODR_15) == GPIO_ODR_ODR_15){
 8000242:	4b11      	ldr	r3, [pc, #68]	; (8000288 <main+0xa0>)
 8000244:	695b      	ldr	r3, [r3, #20]
 8000246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800024a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800024e:	d106      	bne.n	800025e <main+0x76>
			GPIOD->BSRR |= GPIO_BSRR_BR_15
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <main+0xa0>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a0c      	ldr	r2, [pc, #48]	; (8000288 <main+0xa0>)
 8000256:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	e005      	b.n	800026a <main+0x82>
						| GPIO_BSRR_BR_14
						| GPIO_BSRR_BR_13
						| GPIO_BSRR_BR_12;
		} else {
			GPIOD->BSRR |= GPIO_BSRR_BS_15
 800025e:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <main+0xa0>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4a09      	ldr	r2, [pc, #36]	; (8000288 <main+0xa0>)
 8000264:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000268:	6193      	str	r3, [r2, #24]
						| GPIO_BSRR_BS_14
						| GPIO_BSRR_BS_13
						| GPIO_BSRR_BS_12;
		}

		for(int i = 0; i < 1500000; i++){
 800026a:	2300      	movs	r3, #0
 800026c:	607b      	str	r3, [r7, #4]
 800026e:	e003      	b.n	8000278 <main+0x90>
			asm("nop");
 8000270:	bf00      	nop
		for(int i = 0; i < 1500000; i++){
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	3301      	adds	r3, #1
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a04      	ldr	r2, [pc, #16]	; (800028c <main+0xa4>)
 800027c:	4293      	cmp	r3, r2
 800027e:	ddf7      	ble.n	8000270 <main+0x88>
		if((GPIOD->ODR & GPIO_ODR_ODR_15) == GPIO_ODR_ODR_15){
 8000280:	e7df      	b.n	8000242 <main+0x5a>
 8000282:	bf00      	nop
 8000284:	40023800 	.word	0x40023800
 8000288:	40020c00 	.word	0x40020c00
 800028c:	0016e35f 	.word	0x0016e35f

08000290 <SystemInit>:
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
 8000294:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <SystemInit+0x60>)
 8000296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800029a:	4a15      	ldr	r2, [pc, #84]	; (80002f0 <SystemInit+0x60>)
 800029c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80002a4:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <SystemInit+0x64>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a12      	ldr	r2, [pc, #72]	; (80002f4 <SystemInit+0x64>)
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	6013      	str	r3, [r2, #0]
 80002b0:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <SystemInit+0x64>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <SystemInit+0x64>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a0e      	ldr	r2, [pc, #56]	; (80002f4 <SystemInit+0x64>)
 80002bc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80002c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002c4:	6013      	str	r3, [r2, #0]
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <SystemInit+0x64>)
 80002c8:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <SystemInit+0x68>)
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <SystemInit+0x64>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a08      	ldr	r2, [pc, #32]	; (80002f4 <SystemInit+0x64>)
 80002d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002d6:	6013      	str	r3, [r2, #0]
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <SystemInit+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <SystemInit+0x60>)
 80002e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	bf00      	nop
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	e000ed00 	.word	0xe000ed00
 80002f4:	40023800 	.word	0x40023800
 80002f8:	24003010 	.word	0x24003010

080002fc <Reset_Handler>:
 80002fc:	480d      	ldr	r0, [pc, #52]	; (8000334 <LoopForever+0x2>)
 80002fe:	4685      	mov	sp, r0
 8000300:	480d      	ldr	r0, [pc, #52]	; (8000338 <LoopForever+0x6>)
 8000302:	490e      	ldr	r1, [pc, #56]	; (800033c <LoopForever+0xa>)
 8000304:	4a0e      	ldr	r2, [pc, #56]	; (8000340 <LoopForever+0xe>)
 8000306:	2300      	movs	r3, #0
 8000308:	e002      	b.n	8000310 <LoopCopyDataInit>

0800030a <CopyDataInit>:
 800030a:	58d4      	ldr	r4, [r2, r3]
 800030c:	50c4      	str	r4, [r0, r3]
 800030e:	3304      	adds	r3, #4

08000310 <LoopCopyDataInit>:
 8000310:	18c4      	adds	r4, r0, r3
 8000312:	428c      	cmp	r4, r1
 8000314:	d3f9      	bcc.n	800030a <CopyDataInit>
 8000316:	4a0b      	ldr	r2, [pc, #44]	; (8000344 <LoopForever+0x12>)
 8000318:	4c0b      	ldr	r4, [pc, #44]	; (8000348 <LoopForever+0x16>)
 800031a:	2300      	movs	r3, #0
 800031c:	e001      	b.n	8000322 <LoopFillZerobss>

0800031e <FillZerobss>:
 800031e:	6013      	str	r3, [r2, #0]
 8000320:	3204      	adds	r2, #4

08000322 <LoopFillZerobss>:
 8000322:	42a2      	cmp	r2, r4
 8000324:	d3fb      	bcc.n	800031e <FillZerobss>
 8000326:	f7ff ffb3 	bl	8000290 <SystemInit>
 800032a:	f000 f811 	bl	8000350 <__libc_init_array>
 800032e:	f7ff ff5b 	bl	80001e8 <main>

08000332 <LoopForever>:
 8000332:	e7fe      	b.n	8000332 <LoopForever>
 8000334:	20020000 	.word	0x20020000
 8000338:	20000000 	.word	0x20000000
 800033c:	20000000 	.word	0x20000000
 8000340:	080003b8 	.word	0x080003b8
 8000344:	20000000 	.word	0x20000000
 8000348:	2000001c 	.word	0x2000001c

0800034c <ADC_IRQHandler>:
 800034c:	e7fe      	b.n	800034c <ADC_IRQHandler>
	...

08000350 <__libc_init_array>:
 8000350:	b570      	push	{r4, r5, r6, lr}
 8000352:	4e0d      	ldr	r6, [pc, #52]	; (8000388 <__libc_init_array+0x38>)
 8000354:	4c0d      	ldr	r4, [pc, #52]	; (800038c <__libc_init_array+0x3c>)
 8000356:	1ba4      	subs	r4, r4, r6
 8000358:	10a4      	asrs	r4, r4, #2
 800035a:	2500      	movs	r5, #0
 800035c:	42a5      	cmp	r5, r4
 800035e:	d109      	bne.n	8000374 <__libc_init_array+0x24>
 8000360:	4e0b      	ldr	r6, [pc, #44]	; (8000390 <__libc_init_array+0x40>)
 8000362:	4c0c      	ldr	r4, [pc, #48]	; (8000394 <__libc_init_array+0x44>)
 8000364:	f000 f818 	bl	8000398 <_init>
 8000368:	1ba4      	subs	r4, r4, r6
 800036a:	10a4      	asrs	r4, r4, #2
 800036c:	2500      	movs	r5, #0
 800036e:	42a5      	cmp	r5, r4
 8000370:	d105      	bne.n	800037e <__libc_init_array+0x2e>
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000378:	4798      	blx	r3
 800037a:	3501      	adds	r5, #1
 800037c:	e7ee      	b.n	800035c <__libc_init_array+0xc>
 800037e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000382:	4798      	blx	r3
 8000384:	3501      	adds	r5, #1
 8000386:	e7f2      	b.n	800036e <__libc_init_array+0x1e>
 8000388:	080003b0 	.word	0x080003b0
 800038c:	080003b0 	.word	0x080003b0
 8000390:	080003b0 	.word	0x080003b0
 8000394:	080003b4 	.word	0x080003b4

08000398 <_init>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr

080003a4 <_fini>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	bf00      	nop
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr
